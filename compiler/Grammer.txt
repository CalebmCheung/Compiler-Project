program → declaration-list
declaration-list →  declaration { declaration }
declaration → void ID fundecl' | int ID declaration'
declaration' → [ NUM ] ; | fundecl' | ;
fundecl' → ( params ) compound-stmt
params → param-list | void
param-list → param { , param }
param → int ID [ [] ]
compound-stmt → { local-declarations statement-list }
local-declarations → { var-declaration }
statement-list → { statement }
statement → expression-stmt | compound-stmt | selection-stmt | iteration-stmt | return-stmt
expression-stmt → [ expression ] ;
selection-stmt → if ( expression ) statement [ else statement ]
iteration-stmt → while ( expression ) statement
return-stmt → return [ expression ] ;
expression → ID expression' | NUM simple-expression' | ( expression ) simple-expression'
expression' → = expression | [ expression ] expression'' | ( args ) simple-expression' | simple-expression' ( Follow set Factor )
expression'' → = expression | simple-expression' ( Follow set Factor ) 
simple-expression' → additive-expression' [ relop additive-expression ]
additive-expression → term { addop term } 
additive-expression' → term' { addop term }
term → factor { mulop factor }
term' → { mulop factor }
relop → <= | < | > | >= | == | !=
addop → +|-
mulop → * | /
factor → ( expression ) | ID var-call | NUM
var-call → ( args ) | [ expression ] | empty
args → arg-list | empty
arg-list → expression { , expression }


follow-set factor { mulop, addop, <=, <, >, >=, ==, !=, (, ) , ID, NUM , ; , comma, ] }

